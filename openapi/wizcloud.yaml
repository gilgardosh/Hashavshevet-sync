openapi: 3.0.0
info:
  version: 1.0.0
  title: "WizCloud API specification"
  description: "An API that allows interacting with Hashavshevet accounts"
  # termsOfService: "" #enter URL
  # contact: #enter contact info
  #   name: ""
  #   url: ""
  #   email: ""
  # license: #if needed
  #   name: ""
  #   url: ""
servers:
  - url: "https://lb1.wizcloud.co.il"
    description: "main database server"
paths:
  "/createSession/{wizKey}/{company}":
    get:
      summary: "Authentication endpoint. Returns a Token"
      tags:
        - "Auth"
      operationId: "getAuthToken"
      parameters:
        - $ref: "#/components/parameters/wizKey"
        - in: path
          name: company
          required: true
          description: "company's database name. To reveal your database name, move the mouse cursor to the company description in your company list in the UI"
          schema:
            $ref: "#/components/schemas/company"
      responses:
        "200":
          description: "Successful response"
          content:
            text/plain: #TODO: figure out type problem with response
              schema:
                type: string
                example: "48031565e80674f0e946e2acab7194d0756740e8e4594983dabd9d64cb42170361a9b6129c087x4g12a2081838164fed9935b5e7cffc5f449ed222d8fe6888ecb02e41aaabcce85687cc5a5f57313c62331718c9916755ef3fda4e4dc6fcd30cf64c2791608e96860cef69e125d9004d"
        "400":
          description: "illegal gmail"
          content:
            text/plain:
              schema:
                type: string
  "/CompanyListToTokenApi/TokenCompanies":
    post:
      summary: "Get Companies List"
      description: "Export companies list for user token that defined on: 'WizcloudApiPrivateKey' (Include: Company_File_Name, Company_Name, Comp_Vatnum)"
      tags:
        - "companies"
        - "Get"
      security:
        - wizAuth: []
      operationId: "CompaniesForToken"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      responses:
        "200":
          description: "Repdata: companies list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/companiesForTokenRes"
  "/api/napi":
    post:
      summary: "Get User Details"
      tags:
        - "user"
      security:
        - wizAuth: []
      operationId: "getUserData"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      responses:
        "304":
          description: "User Data"
          content:
            application/json:
              schema:
                type: object
                example: "{'session':{'cid':'wizdb21fn8','user':'mail@gmail.com','user_id':11,'company_id':9,'branch':1,'use_name':'משתמש כלשהו ','wizcomp_no':'345','company_name':'חברה של עדנה '},'data':[]}"
  "/jtransApi/tmpBatch":
    post:
      summary: "Import transactions, check errors and input batch"
      description: "Imports the transactions to a new or already existing temporary batch. You may check for errors or input the batch into the permanent storage (if no errors were found)."
      tags:
        - "Batch"
        - "Import"
      security:
        - wizAuth: []
      operationId: "tmpJurnalBatch"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/tmpJurnalBatchBody"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batchRes"
  "/jtransApi/chkBatch":
    post:
      summary: "Checks if there are errors in the batch"
      tags:
        - "Batch"
        - "Check"
      security:
        - wizAuth: []
      operationId: "chkJurnalBatch"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - batchNo
              properties:
                batchNo:
                  allOf:
                    - $ref: "#/components/schemas/batchNo"
                    - description: "check the batch having this number"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batchRes"
  "/jtransApi/newBatch":
    post:
      summary: "Opens a new batch and return the number"
      tags:
        - "Batch"
        - "New"
      security:
        - wizAuth: []
      operationId: "newJurnalBatch"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batchRes"
  "/jtransApi/issueBatch":
    post:
      summary: "Checks and inputs the temporary batch into the permanent storage."
      tags:
        - "Batch"
        - "Issue"
      security:
        - wizAuth: []
      operationId: "issueJurnalBatch"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - batchNo
              properties:
                batchNo:
                  allOf:
                    - $ref: "#/components/schemas/batchNo"
                    - description: "Input the batch having this number"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batchRes"
  "/IndexApi/importIndex":
    post:
      summary: "Imports or updates records to the selected index"
      tags:
        - "Index"
        - "Import"
      security:
        - wizAuth: []
      operationId: "importIndexRecords"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            #TODO check if all parameters are required, and api validation
            schema:
              $ref: "#/components/schemas/importIndexRecordsBody"
      responses:
        "200":
          description: "Imported successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/indexRes"
        "304":
          description: "Errors in data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/indexRes"
  "/invApi/createDoc":
    post:
      summary: "Imports and updates temporary documents"
      description: "Imports and updates new or already existing temporary documents. You may check for errors or issue and input the documents into the permanent storage (if no errors were found)."
      tags:
        - "Document"
        - "Import"
      security:
        - wizAuth: []
      operationId: "createDocument"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            #TODO check if all parameters are required, and api validation
            schema:
              $ref: "#/components/schemas/createDocumentBody"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/documentRes"
  "/invApi/issueDocument":
    post:
      summary: "Checks if there are errors in the batch"
      description: "Check issue and input the document to the permanent storage."
      tags:
        - "Document"
        - "Issue"
      security:
        - wizAuth: []
      operationId: "issueDoc"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - stockID
              properties:
                stockID:
                  $ref: "#/components/schemas/stockID"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/documentRes"
  "/invApi/delDocument":
    post:
      summary: "Delete document from tables"
      tags:
        - "Document"
        - "Delete"
      security:
        - wizAuth: []
      operationId: "delDocument"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - stockID
              properties:
                stockID:
                  $ref: "#/components/schemas/stockID"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/documentRes"
  "/invApi/getDoc":
    post:
      summary: "Show document data"
      tags:
        - "Document"
        - "Get"
      security:
        - wizAuth: []
      operationId: "showDocument"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - stockID
              properties:
                stockID:
                  $ref: "#/components/schemas/stockID"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/documentRes"
  "/BankPagesApi/importBankPage":
    post:
      summary: "Import  or update records to chosen index"
      tags:
        - "BankPages"
        - "Import"
      security:
        - wizAuth: []
      operationId: "importBankPageRecords"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            #TODO check if all parameters are required, and api validation
            schema:
              type: object
              required:
                - rows
              properties:
                rows:
                  type: object
                  #TODO define the object and create schema
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/companiesForTokenRes"
  "/ExportDataApi/exportData":
    post:
      summary: "Export data according to the selected report"
      tags:
        - "Export"
      security:
        - wizAuth: []
      operationId: "exportDataRecords"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - datafile
              properties:
                parameters:
                  type: array
                  description: "from defined param(params_data)"
                  items:
                    type: object
                    properties:
                      p_name:
                        type: string
                      id:
                        type: integer
                      type:
                        type: string
                      name:
                        type: string
                      defVal:
                        type: string
                      opName:
                        type: string
                      opOrigin:
                        type: string
                datafile:
                  type: string
                  description: "from defined param(encrypt_reportData)"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                description: ""
                type: object
                properties:
                  repdata:
                    type: array
                    items:
                      type: object

  # "/crmActivitiesApi/createSchema":
  # "/crmActivitiesTest/createSchema":

components:
  parameters:
    wizKey:
      name: "wizKey"
      in: path
      description: "The user ID. User token issued by the main administrator (the administrator that opens the company library)."
      required: true
      schema:
        type: string

  schemas:
    AccountKey:
      type: string
      description: "The customer or supplier account key"
      maximum: 15
      example: "40001"
    AccountName:
      type: string
      description: "name acc 111"
      maximum: 50
      example: "222"
    Address:
      type: string
      description: "Address"
      maximum: 50 #NOTE: in StockData can be 100
    Agent:
      type: integer
      format: int32
      description: "Salesperson"
      example: "1"
    AssignKey:
      type: string
      maximum: 15
      description: "Central account key (existing account)"
      example: "777"
    AverageSupplyPeriod:
      type: number
      format: float
      description: "Average supply time"
    AvgLatePay:
      type: integer
      format: int32
      description: "Average delay of payments"
    BalanceCode:
      type: integer
      format: int32
      description: "Code for the balance and profit and loss report"
    BankAccount:
      type: string
      maximum: 20
      description: "Bank account #"
    BankCode:
      type: string
      maximum: 3
      description: "Bank code"
    BarCode:
      type: string
      maximum: 20
      description: "Barcode"
    batchNo:
      type: integer
      format: int32
      minimum: 1
      maximum: 2147483647
      example: "555"
    Branch:
      type: integer
      format: int32
      description: "Branch"
    BranchCode:
      type: string
      maximum: 5
      description: "Bank branch code"
    City:
      type: string
      maximum: 20 #NOTE: in StockData could be 50
      description: "City"
    CommitionPrc:
      type: number
      format: float
      description: "% commission"
    company:
      type: string
      maximum: 30
      description: "company's database name. To reveal your database name, move the mouse cursor to the company description in your company list in the UI"
    CostCode:
      type: integer
      format: int32
      description: "Existing cost center code"
      example: "22"
    CostOfShortage:
      type: number
      format: float
      description: "Cost of shortage"
    Country:
      type: string
      maximum: 20
      description: "Country"
    CreditTermsCode:
      type: integer
      format: int32
      description: "Split payment code"
    CredName:
      type: string
      maximum: 50
      description: "Name of the main credit account"
      example: "222 name"
    Currency:
      type: string
      maximum: 5
      description: "List price currency"
    CurrencyCode:
      type: string
      maximum: 5
      description: "List price currency"
      example: "$"
    CustomerNote:
      type: string
      maximum: 250
      description: "Message for the customer"
    DatF3:
      type: string #TODO: maybe can validate here: mm/dd/yyyy
      description: "Additional date"
      example: "mm/dd/yyyy"
    DebitCredit:
      type: string
      maximum: 1
      enum:
        - "0"
        - "1"
      description: "Debit=1, Credit=0"
      example: "1"
    DebName:
      type: string
      maximum: 50
      description: "Name of the main debit account"
      example: "111 name"
    DeductFile:
      type: string
      maximum: 20
      description: "Income file number"
    DeductionPrc:
      type: number
      format: float
      description: "% withholding tax"
      example: "10.5"
    DeductionValid:
      type: string #maybe can validate here: mm/dd/yyyy
      description: "Validity date of the % withholding tax"
      example: "28/02/2019"
    DefaultWarehouse:
      type: integer
      format: int32
      description: "Warehouse"
    DemandPerDay:
      type: number
      format: float
      description: "Average demand per day"
    DemandPerMonth:
      type: number
      format: float
      description: "Average demand per month"
    Description:
      type: string
      maximum: 250
      description: "Details"
    Det2:
      type: string
      maximum: 50
      description: "Additional remarks"
    Details:
      type: string
      maximum: 50 #NOTE: in StockData could be 250
      description: "Details, Remarks"
      example: "my details 11"
    DifferAcc:
      type: string
      maximum: 15
      description: "Account key for small differences (existing account)"
    DiscountCode:
      type: integer
      format: int32
      description: "Discount code"
    DiscountPrc:
      type: number
      format: float #TODO: make sure Items_Data accepts not only INT
      description: "% of sale promotion or general discount "
      example: "10"
    DocCurr:
      type: string
      maximum: 5
      description: "Default value for foreign currency"
    DocNumber:
      type: integer
      format: int32
      description: "Document number. When the document numeration is unchangeable, the number is determined when the document is issued."
      example: "1"
    DocumentID:
      type: integer
      format: int32
      description: "Document type (according to the DocumentDef table)"
      example: "1"
    DueDate:
      type: string #TODO: maybe can validate here: mm/dd/yyyy
      description: "Due date"
      example: "30/01/2018"
    DutyPrc:
      type: number
      format: float
      description: "% customs"
    Email:
      type: string
      maximum: 50
      description: "E-Mail address "
    Fax:
      type: string
      maximum: 30
      description: "Fax"
    Filter:
      type: string
      maximum: 5 #NOTE: in Items Data could be 10
      description: "Filtering"
    FixedOrderCost:
      type: number
      format: float
      description: "Fix cost of order"
    ForignName:
      type: string
      maximum: 100
      description: "Item name for export documents"
    FullName:
      type: string
      maximum: 50
      description: "Full Name"
      example: "8888 name new"
    ImpTaxPrc:
      type: number
      format: float
      description: "% sales tax - import"
    ItemKey:
      type: string
      maximum: 20
      description: "Item key"
      example: "33"
    ItemName:
      type: string
      maximum: 100
      description: "Item name"
      example: "name item 33"
    LastPurchDate:
      type: string #TODO: maybe can validate here: mm/dd/yyyy
      description: "Last purchasing price date"
    LineNoForSorting:
      type: integer
      format: int32
      description: "Line ID"
    Localization:
      type: string
      maximum: 50
      description: "Localization (in the storehouse)"
    MainAccount:
      type: integer
      format: int32
      description: "Code of the main account"
    Masav:
      type: string
      maximum: 1
      enum:
        - "0"
        - "1"
      description: "Transfer to MASAV"
    MatchCurr:
      type: string
      maximum: 5
      description: "Currency for reconciliation (when the price is in foreign currency) "
    MaxCredit:
      type: number
      format: float
      description: "Credit limit"
    MaxCreditCurrency:
      type: string
      maximum: 5
      description: "Credit currency"
    MaxObligo:
      type: number
      format: float
      description: "Credit risk limit"
    MaxObligoCurrency:
      type: string
      maximum: 5
      description: "Credit risk currency"
    MaxStoragePeriod:
      type: number
      format: float
      description: "Maximum storage period"
    Osek874:
      type: string
      maximum: 9
      description: "VAT registration number"
      example: "123456789"
    Phone:
      type: string
      maximum: 30
      description: "Phone"
    Price:
      type: number
      format: float
      description: "Price"
      example: "1050"
    PurchAcc:
      type: string
      maximum: 15
      description: "Expense account (existing account key)"
    PurchaseUnit:
      type: string
      maximum: 5
      description: "Unit measure for purchase"
    PurchCurrency:
      type: string
      maximum: 5
      description: "Purchasing price currency"
    PurchPrice:
      type: number
      format: float
      description: "Last purchasing price"
    Quant: #TODO: merge with Quantity
      type: number
      format: float
      description: "Quantity"
    Quantity:
      type: number
      format: float
      description: "Quantity"
      example: "5"
    Rate:
      type: number
      format: float
      description: "Currency rate"
      example: "3.7"
    Ref2:
      type: integer
      format: int32
      description: "Reference-2"
    Ref3:
      type: integer
      format: int32
      description: "Reference-3"
    Reference:
      type: integer
      format: int32
      description: "Reference"
      example: "125"
    Remarks:
      type: string
      maximum: 250
      description: "Remarks"
    ReorderQuant:
      type: number
      format: float
      description: "Point of order"
    SalesAcc:
      type: string
      maximum: 15
      description: "Sales account (existing account key)"
    SalesUnit:
      type: string
      maximum: 5
      description: "Unit measure for sales"
    SortGroup:
      type: integer
      format: int32
      description: "Sorting code"
      example: "258"
    stockID:
      type: integer
      format: int32
      minimum: 1
      maximum: 2147483647
      description: "ID in the stock table. Required when updating an existing document."
      example: "100"
    StockLevel:
      type: number
      format: float
      description: "Inventory level"
    StorageCost:
      type: number
      format: float
      description: "Cost of storage"
    SuF:
      type: number
      format: float
      description: "Total NIS amount (credit or debit)"
      example: "1234.56"
    SuFDlr:
      type: number
      format: float
      description: "Total amount in foreign currency"
      example: "20.00"
    SumDiscount:
      type: number
      format: float
      description: "The discount amount"
    TaxFileNum:
      type: string
      maximum: 20
      description: "VAT registration number"
    Tftal:
      type: number
      format: float
      description: "Total amount"
      example: "2100"
    TFtalDiscount:
      type: number
      format: float
      description: "% customer discount"
    TransCredID:
      type: string
      maximum: 15
      description: "Main credit account key"
      example: "40001"
    TransDebID:
      type: string
      maximum: 15
      description: "Main debit account key"
      example: "777"
    TransType:
      type: string
      maximum: 3
      description: "Transaction type code"
      example: "חל"
    ValueDate:
      type: string #TODO: maybe can validate here: mm/dd/yyyy
      description: "Date"
      example: "30/01/2018"
    VatExampt:
      type: string
      maximum: 1
      enum:
        - "0"
        - "1"
      description: "VAT exempt"
    VatFreeSalesAcc:
      type: string
      maximum: 15
      description: "VAT exempt sales account (existing account)"
    Volume:
      type: number
      format: float
      description: "Volume"
    Warehouse:
      type: integer
      format: int32
      description: "Warehouse"
      example: "1"
    WebSite:
      type: string
      maximum: 250
      description: "Web site"
    Weigt:
      type: number
      format: float
      description: "Weight"
    WieghtItem:
      type: string
      maximum: 1
      enum:
        - "0"
        - "1"
      description: "Weightable item (1- positive)"
    WorF:
      type: string
      maximum: 15
      description: "Occupation"
    Zip:
      type: string
      maximum: 10
      description: "Zip code"

    tmpJurnalBatchBody:
      type: object
      required:
        - batchNo
        - rows
      properties:
        insertolastb:
          type: boolean
          default: true
          description: "Insert the transactions to the last open temporary batch. If false, open a new batch. True overrides batchNo."
        batchNo:
          allOf:
            - $ref: "#/components/schemas/batchNo"
            - description: "Insert the transactions to the temporary batch having this number. If no such temporary batch exists, open a new batch."
        check:
          type: boolean
          default: true
          description: "check the batch for errors and return the batch status"
        issue:
          type: boolean
          default: false
          description: "input the temporary batch into the permanent storage."
        rows:
          type: array
          items:
            $ref: "#/components/schemas/journalTrans"

    importIndexRecordsBody:
      type: object
      required: #TODO: make sure whats required
        - myindex
        - insertnew
        - rows
      properties:
        myindex:
          type: string
          description: "acc- for accounts, itm- for items"
          enum:
            - "acc"
            - "itm"
        insertnew:
          type: boolean
          default: true
          description: "Allow inserting new records. If false only update is allowed"
        rows:
          type: array
          items:
            oneOf:
              - type: object #TODO: figure out why without this line pops an error
              - $ref: "#/components/schemas/accountsTrans"
              - $ref: "#/components/schemas/itemsTrans"

    createDocumentBody:
      type: object
      required: #TODO: make sure whats required
        - issueStock
        - deleteTemp
        - rows
      properties:
        issueStock:
          type: boolean
          description: "issue the document"
        deleteTemp:
          type: boolean
          description: "if errors found, delete document or not"
        rows:
          type: array
          items:
            $ref: "#/components/schemas/stockTrans"

    exportDataRecordsBody:
      type: object
      required: #TODO: make sure whats required
        - datafile
        - parameters
      properties:
        parameters:
          type: array
          items:
            type: object
            #TODO define the object and create schema
        datafile:
          type: string

    journalTrans:
      type: object
      required: #TODO: make sure whats required
        - SuF
        - TransCredID
        - TransDebID
        - moves
      properties:
        Branch:
          $ref: "#/components/schemas/Branch"
        CostCode:
          $ref: "#/components/schemas/CostCode"
        CredName:
          $ref: "#/components/schemas/CredName"
        CurrencyCode:
          $ref: "#/components/schemas/CurrencyCode"
        DatF3:
          $ref: "#/components/schemas/DatF3"
        DebName:
          $ref: "#/components/schemas/DebName"
        Description:
          $ref: "#/components/schemas/Description"
        Det2:
          $ref: "#/components/schemas/Det2"
        Details:
          $ref: "#/components/schemas/Details"
        DueDate:
          $ref: "#/components/schemas/DueDate"
        Osek874:
          $ref: "#/components/schemas/Osek874"
        Quant:
          $ref: "#/components/schemas/Quant"
        Ref2:
          $ref: "#/components/schemas/Ref2"
        Ref3:
          $ref: "#/components/schemas/Ref3"
        Reference:
          $ref: "#/components/schemas/Reference"
        SuF:
          $ref: "#/components/schemas/SuF"
        SuFDlr:
          $ref: "#/components/schemas/SuFDlr"
        TransCredID:
          $ref: "#/components/schemas/TransCredID"
        TransDebID:
          $ref: "#/components/schemas/TransDebID"
        TransType:
          $ref: "#/components/schemas/TransType"
        ValueDate:
          type: string #TODO: different from other date patterns: yyyy-mm-dd
          description: "Date"
          example: "2019-11-30"
        moves:
          type: array
          items:
            $ref: "#/components/schemas/journalSubTrans"

    journalSubTrans:
      type: object
      required: #TODO: make sure whats required
        - AccountKey
        - DebitCredit
        - SuF
      properties:
        AccountKey:
          $ref: "#/components/schemas/AccountKey"
        DebitCredit:
          $ref: "#/components/schemas/DebitCredit"
        SuF:
          $ref: "#/components/schemas/SuF"
        SuFDlr:
          $ref: "#/components/schemas/SuFDlr"

    accountsTrans:
      type: object
      required:
        - AccountKey
      properties:
        AccountKey:
          $ref: "#/components/schemas/AccountKey"
        Address:
          $ref: "#/components/schemas/Address"
        Agent:
          $ref: "#/components/schemas/Agent"
        AssignKey:
          $ref: "#/components/schemas/AssignKey"
        AverageSupplyPeriod:
          $ref: "#/components/schemas/AverageSupplyPeriod"
        AvgLatePay:
          $ref: "#/components/schemas/AvgLatePay"
        BalanceCode:
          $ref: "#/components/schemas/BalanceCode"
        BankAccount:
          $ref: "#/components/schemas/BankAccount"
        BankCode:
          $ref: "#/components/schemas/BankCode"
        BranchCode:
          $ref: "#/components/schemas/BranchCode"
        City:
          $ref: "#/components/schemas/City"
        CostCode:
          $ref: "#/components/schemas/CostCode"
        Country:
          $ref: "#/components/schemas/Country"
        CreditTermsCode:
          $ref: "#/components/schemas/CreditTermsCode"
        CustomerNote:
          $ref: "#/components/schemas/CustomerNote"
        DeductFile:
          $ref: "#/components/schemas/DeductFile"
        DeductionPrc:
          $ref: "#/components/schemas/DeductionPrc"
        DeductionValid:
          $ref: "#/components/schemas/DeductionValid"
        Details:
          $ref: "#/components/schemas/Details"
        DifferAcc:
          $ref: "#/components/schemas/DifferAcc"
        DiscountCode:
          $ref: "#/components/schemas/DiscountCode"
        DocCurr:
          $ref: "#/components/schemas/DocCurr"
        Email:
          $ref: "#/components/schemas/Email"
        Fax:
          $ref: "#/components/schemas/Fax"
        Filter:
          $ref: "#/components/schemas/Filter"
        FixedOrderCost:
          $ref: "#/components/schemas/FixedOrderCost"
        FullName:
          $ref: "#/components/schemas/FullName"
        MainAccount:
          $ref: "#/components/schemas/MainAccount"
        Masav:
          $ref: "#/components/schemas/Masav"
        MatchCurr:
          $ref: "#/components/schemas/MatchCurr"
        MaxCredit:
          $ref: "#/components/schemas/MaxCredit"
        MaxCreditCurrency:
          $ref: "#/components/schemas/MaxCreditCurrency"
        MaxObligo:
          $ref: "#/components/schemas/MaxObligo"
        MaxObligoCurrency:
          $ref: "#/components/schemas/MaxObligoCurrency"
        Phone:
          $ref: "#/components/schemas/Phone"
        SortGroup:
          $ref: "#/components/schemas/SortGroup"
        TaxFileNum:
          $ref: "#/components/schemas/TaxFileNum"
        TFtalDiscount:
          $ref: "#/components/schemas/TFtalDiscount"
        VatExampt:
          $ref: "#/components/schemas/VatExampt"
        WebSite:
          $ref: "#/components/schemas/WebSite"
        WorF:
          $ref: "#/components/schemas/WorF"
        Zip:
          $ref: "#/components/schemas/Zip"

    itemsTrans:
      type: object
      required:
        - ItemKey
      properties:
        BarCode:
          $ref: "#/components/schemas/BarCode"
        CostOfShortage:
          $ref: "#/components/schemas/CostOfShortage"
        Currency:
          $ref: "#/components/schemas/Currency"
        DefaultWarehouse:
          $ref: "#/components/schemas/DefaultWarehouse"
        DemandPerDay:
          $ref: "#/components/schemas/DemandPerDay"
        DemandPerMonth:
          $ref: "#/components/schemas/DemandPerMonth"
        DiscountCode:
          $ref: "#/components/schemas/DiscountCode"
        DiscountPrc:
          $ref: "#/components/schemas/DiscountPrc"
        DutyPrc:
          $ref: "#/components/schemas/DutyPrc"
        Filter:
          $ref: "#/components/schemas/Filter"
        ForignName:
          $ref: "#/components/schemas/ForignName"
        ImpTaxPrc:
          $ref: "#/components/schemas/ImpTaxPrc"
        ItemKey:
          $ref: "#/components/schemas/ItemKey"
        ItemName:
          $ref: "#/components/schemas/ItemName"
        LastPurchDate:
          $ref: "#/components/schemas/LastPurchDate"
        Localization:
          $ref: "#/components/schemas/Localization"
        MaxStoragePeriod:
          $ref: "#/components/schemas/MaxStoragePeriod"
        Price:
          $ref: "#/components/schemas/Price"
        PurchAcc:
          $ref: "#/components/schemas/PurchAcc"
        PurchaseUnit:
          $ref: "#/components/schemas/PurchaseUnit"
        PurchCurrency:
          $ref: "#/components/schemas/PurchCurrency"
        PurchPrice:
          $ref: "#/components/schemas/PurchPrice"
        Quantity:
          $ref: "#/components/schemas/Quantity"
        ReorderQuant:
          $ref: "#/components/schemas/ReorderQuant"
        SalesAcc:
          $ref: "#/components/schemas/SalesAcc"
        SalesUnit:
          $ref: "#/components/schemas/SalesUnit"
        SortGroup:
          $ref: "#/components/schemas/SortGroup"
        StockLevel:
          $ref: "#/components/schemas/StockLevel"
        StorageCost:
          $ref: "#/components/schemas/StorageCost"
        VatExampt:
          $ref: "#/components/schemas/VatExampt"
        VatFreeSalesAcc:
          $ref: "#/components/schemas/VatFreeSalesAcc"
        Volume:
          $ref: "#/components/schemas/Volume"
        Weigt:
          $ref: "#/components/schemas/Weigt"
        WieghtItem:
          $ref: "#/components/schemas/WieghtItem"

    stockTrans:
      type: object
      required: #TODO: make sure whats required
        - AccountKey
        - DocumentID
        - moves
      properties:
        AccountKey:
          $ref: "#/components/schemas/AccountKey"
        AccountName:
          $ref: "#/components/schemas/AccountName"
        Address:
          $ref: "#/components/schemas/Address"
        Agent:
          $ref: "#/components/schemas/Agent"
        City:
          $ref: "#/components/schemas/City"
        CostCode:
          $ref: "#/components/schemas/CostCode"
        Details:
          $ref: "#/components/schemas/Details"
        DiscountPrc:
          $ref: "#/components/schemas/DiscountPrc"
        DocNumber:
          $ref: "#/components/schemas/DocNumber"
        DocumentID:
          $ref: "#/components/schemas/DocumentID"
        Osek874:
          $ref: "#/components/schemas/Osek874"
        Phone:
          $ref: "#/components/schemas/Phone"
        Quantity:
          $ref: "#/components/schemas/Quantity"
        Ref3:
          $ref: "#/components/schemas/Ref3"
        Remarks:
          $ref: "#/components/schemas/Remarks"
        StockID:
          $ref: "#/components/schemas/stockID"
        SumDiscount:
          $ref: "#/components/schemas/SumDiscount"
        Tftal:
          $ref: "#/components/schemas/Tftal"
        ValueDate:
          $ref: "#/components/schemas/ValueDate"
        Warehouse:
          $ref: "#/components/schemas/Warehouse"
        moves:
          type: array
          items:
            $ref: "#/components/schemas/stockSubTrans"

    stockSubTrans:
      type: object
      required: #TODO: make sure whats required
        - ItemKey
        - Quantity
      properties:
        Agent:
          $ref: "#/components/schemas/Agent"
        CommitionPrc:
          $ref: "#/components/schemas/CommitionPrc"
        CurrencyCode:
          $ref: "#/components/schemas/CurrencyCode"
        Details:
          $ref: "#/components/schemas/Details"
        DiscountPrc:
          $ref: "#/components/schemas/DiscountPrc"
        ItemKey:
          $ref: "#/components/schemas/ItemKey"
        ItemName:
          $ref: "#/components/schemas/ItemName"
        LineNoForSorting:
          $ref: "#/components/schemas/LineNoForSorting"
        Price:
          $ref: "#/components/schemas/Price"
        Quantity:
          $ref: "#/components/schemas/Quantity"
        Rate:
          $ref: "#/components/schemas/Rate"
        Reference:
          $ref: "#/components/schemas/Reference"
        Tftal:
          $ref: "#/components/schemas/Tftal"
        Warehouse:
          $ref: "#/components/schemas/Warehouse"

    companiesForTokenRes:
      type: object
      properties:
        repdata:
          type: array
          items:
            type: object
          description: "List of companies for user"
      example: "{'repdata':[{'Company_File_Name':'wizdb77c2b','Company_Name':'חברה של עדנה ','Comp_Vatnum':'999999999'}]}"

    batchRes:
      type: object
      properties:
        status:
          type: string
        batch_issue:
          oneOf:
            - type: string
            - type: array
              items:
                type: object
        batch_check:
          oneOf:
            - type: string
            - type: array
              items:
                type: object
        newbatch:
          $ref: "#/components/schemas/batchNo"
        batchno:
          $ref: "#/components/schemas/batchNo"
        errors:
          oneOf:
            - type: string
            - type: array
              items:
                type: object

    indexRes:
      type: object
      properties:
        status:
          type: string
          description: "OK / Errors: 'error description' / No Permission"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/errorItem"
          description: "List of errors"
    
    errorItem:
      type: object
      properties:
        index:
          type: integer
        err:
          type: string
    
    documentRes:
      type: object
      properties:
        status:
          type: string
        NewDocumentStockID:
          description: "New stockid"
          type: integer
        DocumentIssuedStatus:
          description: "IsError:'error description' / OK / IN TEMP"
          type: string
        TempDocumentDeleted:
          description: "Yes or No"
          type: string
        # ErrorsOnDoc:
        DocumentDetails:
          description: "All document data"
          type: array
          items:
            type: array
            items:
              oneOf:
                - $ref: "#/components/schemas/DocumentDetails1"
                - $ref: "#/components/schemas/DocumentDetails2"
        errors:
          description: "List of errors"
          oneOf:
            - type: string
            - type: array
              items:
                type: object

    DocumentDetails1: #TODO: rename for somethong meaningful
      type: object
      properties:
        AccountKey:
          $ref: "#/components/schemas/AccountKey"
        AccountName:
          $ref: "#/components/schemas/AccountName"
        Address:
          $ref: "#/components/schemas/Address"
        Agent:
          $ref: "#/components/schemas/Agent"
        batch:  #TODO can this merge with batchNo?
          type: integer
        City:
          $ref: "#/components/schemas/City"
        copies: #TODO: make sure type is right (varify with wizcloud)
          type: number
        currency:
          $ref: "#/components/schemas/Currency"
        Details:
          $ref: "#/components/schemas/Details"
        DiscountPrc:
          $ref: "#/components/schemas/DiscountPrc"
        DocNumber:
          $ref: "#/components/schemas/DocNumber"
        DocumentID:
          $ref: "#/components/schemas/DocumentID"
        duedate:  #TODO: format doesnt match input date formats
          type: string
        issuedate:  #TODO: format doesnt match input date formats
          type: string
        mainrate: #TODO: make sure type is right (varify with wizcloud)
          type: number
        paydate:  #TODO: format doesnt match input date formats
          type: string
        Phone:
          $ref: "#/components/schemas/Phone"
        printstyle: #TODO: make sure type is right (varify with wizcloud)
          type: number
        Rate:
          $ref: "#/components/schemas/Rate"
        Reference:
          $ref: "#/components/schemas/Reference"
        Remarks:
          $ref: "#/components/schemas/Remarks"
        status:
          type: string
        StockID:
          $ref: "#/components/schemas/stockID"
        Tftal:
          $ref: "#/components/schemas/Tftal"
        tftalvat: #TODO: make sure type is right (varify with wizcloud)
          type: number
        tftalvatfree: #TODO: make sure type is right (varify with wizcloud)
          type: number
        vatprc: #TODO: make sure type is right (varify with wizcloud)
          type: number
        ValueDate:  #TODO: format doesnt match input date formats
          $ref: "#/components/schemas/ValueDate"

    DocumentDetails2: #TODO: rename for somethong meaningful
      type: object
      properties:
        Agent:
          $ref: "#/components/schemas/Agent"
        CurrencyCode:
          $ref: "#/components/schemas/CurrencyCode"
        Details:
          $ref: "#/components/schemas/Details"
        DiscountPrc:
          $ref: "#/components/schemas/DiscountPrc"
        duedate:  #TODO: format doesnt match input date formats
          type: string
        ItemKey:
          $ref: "#/components/schemas/ItemKey"
        ItemName:
          $ref: "#/components/schemas/ItemName"
        moveid: #TODO: make sure type is right (varify with wizcloud)
          type: integer
        Price:
          $ref: "#/components/schemas/Price"
        Quantity:
          $ref: "#/components/schemas/Quantity"
        Rate:
          $ref: "#/components/schemas/Rate"
        status:
          type: string
        StockID:
          $ref: "#/components/schemas/stockID"
        Tftal:
          $ref: "#/components/schemas/Tftal"
        Warehouse:
          $ref: "#/components/schemas/Warehouse"

        # batch_issue:
        #   oneOf:
        #     - type: string
        #     - type: array
        # batch_check:
        #   oneOf:
        #     - type: string
        #     - type: array
        # newbatch:
        #   $ref: "#/components/schemas/batchNo"
        # batchno:
        #   $ref: "#/components/schemas/batchNo"
        errors:
          oneOf:
            - type: string
            - type: array
              items:
                type: object

    bankPageRes:
      type: object
      properties:
        status:
          type: string
          description: "OK / No Permission"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/errorItem"
          description: "List of errors"

  securitySchemes:
    wizAuth:
      type: http
      scheme: bearer
      bearerFormat: string
