type Query {
  """A Single Record by its ID"""
  getRecordById(id: Int!): Record

  """List of All Records"""
  getRecords: [Record]

  """A Single Transaction by its ID"""
  getTransactionById(id: Int!): Transaction

  """List of All Transactions"""
  getTransactions: [Transaction]

  """A Single Batch by its ID"""
  getBatchById(id: Int!): Batch

  """List of All Batches"""
  getBatches: [Batch]

  """A Single Account by its ID"""
  getAccountById(id: Int!): Account

  """List of All Accounts"""
  getAccounts: [Account]

  """A Single Bank Page Record by its ID"""
  getBankPageRecordById(id: Int!): BankPageRecord

  """List of All Bank Page Records"""
  getBankPageRecords: [BankPageRecord]

  """A Single Bank Page (Which Is A List Of Bank Page Records), by its ID"""
  getBankPageById(id: Int!): BankPage

  """List Of Bank Pages"""
  getBankPages: [BankPage]

  """
  List of Companies for user token thats defined on: 'WizcloudApiPrivateKey'
  """
  getUserCompanies: [Company]

  """Get User Details"""
  getUserDetails: HashavshevetUser

  """Checks if there are errors in the batch"""
  checkBatch(
    """check the batch having this ID"""
    id: Int!
  ): BatchErrorReport
}

"""A Single Record"""
type Record {
  """Main account details"""
  account: Account

  """Main account details identifier"""
  accountId: String!

  """Batch details"""
  batch: Batch

  """Batch identifier"""
  batchId: Int!

  """Counter account details"""
  counterAccount: Account

  """Counter account identifier"""
  counterAccountId: String

  """Counter account name"""
  counterAccountName: String

  """Cumulative balance"""
  cumulativeBalance: Float

  """Cumulative balance by sorting code"""
  cumulativeBalanceBySortKey: Float

  """Cumulative balance of total open amount of record"""
  cumulativeBalanceOfOpenSumInRecord: Float

  """Cumulative balance without opening balance"""
  cumulativeBalanceWithoutOpeningBalance: Float

  """Credit / Debit"""
  debitOrCredit: String!

  """0=Credit / 1=Debit"""
  debitOrCreditNumber: Int!

  """Estimated total amount"""
  estimatedSum: Float

  """Credit amount in foreign currency"""
  foreignCurrencyCredit: Float

  """Cumulative balance in foreign currency"""
  foreignCurrencyCumulativeBalance: Float

  """Cumulative balance in foreign currency without opening balance"""
  foreignCurrencyCumulativeBalanceWithoutOpeningBalance: Float

  """Dedit amount in foreign currency"""
  foreignCurrencyDebit: Float

  """Total amount in foreign currency"""
  foreignCurrencySum: Float

  """Total amount in foreign currency closed in record"""
  foreignCurrencySumClosedInRecord: Float

  """Total amount in foreign currency open  in record"""
  foreignCurrencySunOpenInRecord: Float

  """Record identifier"""
  id: Int!

  """Match number - card analysis"""
  matchNumberCardAnalysis: Int

  """Credit amount in NIS"""
  shekelCredit: Float

  """Cumulative balance in NIS by filter"""
  shekelCumulativeBalanceBySector: Float

  """Dedit amount in NIS"""
  shekelDebit: Float

  """Total NIS amount"""
  shekelSum: Float

  """Total NIS amount closed in record"""
  shekelSumClosedInRecord: Float

  """Total NIS amount open  in record"""
  shekelSumOpenInRecord: Float

  """Transaction details"""
  transaction: Transaction

  """Transaction identifier"""
  transactionId: Int!
}

"""A Single Account"""
type Account {
  id: String!
  name: String
  sortGroup: Int
  sector: String
  details: String
  initDate: String
  type: String
  isActive: String
  address: String
  city: String
  zipcode: String
  country: String
  phone: String
  cellphone: String
  fax: String
  email: String
  balanceCode: String
  generalDiscountPercent: Float
  vatExempt: String
  occupation: String
  agent: Int
  withholdingPercent: Float
  withholdingValidity: String
  bankId: String
  bankBranchId: String
  bankAccountId: String
  authorizedDealerNumber: String
  mainAccount: String
  maxCredit: Float
  maxCreditCurrency: String
  maxObligo: Float
  maxObligoCurrency: String
  incomeFileNumber: String
  centralAccount: String
  accountantTransfer: String
  costingCode: String
}

"""A Single Batch"""
type Batch {
  id: Int!
  type: String
  status: String
  issueDate: String
  details: String
  initTime: String
  initDate: String
  transactions: [Transaction]
  records: [Record]
}

"""A Transaction of Some Records"""
type Transaction {
  """VAT registration number"""
  authorizedDealerNumber: String

  """Batch details"""
  batch: Batch

  """Batch Identifier"""
  batchId: Int!

  """Branch"""
  branch: Int

  """Branch Name"""
  branchName: String

  """Cheque Identifier"""
  chequeId: Int

  """Cost-center code"""
  costingCode: String

  """Cost-center code name"""
  costingCodeName: String

  """Cost-center code filter"""
  costingCodeSector: String

  """Main credit account details"""
  creditor: Account

  """Main credit account Identifier"""
  creditorId: String

  """Currency"""
  currencyCode: String

  """Additional date"""
  date3: String

  """Main debit account details"""
  debtor: Account

  """Main debit account identifier"""
  debtorId: String

  """Description"""
  description: String

  """Remarks"""
  details1: String

  """Additional remarks"""
  details2: String

  """Due date"""
  dueDate: String

  """exchange rate differences"""
  exchangeRateDifferences: String

  """Total amount in foreign currency"""
  foreignCurrencySum: Float

  """Transaction Identifier"""
  id: Int!

  """Inventory Identifier"""
  inventoryId: Int

  """Linked file"""
  linkedFile: String

  """Quantity"""
  quantity: Float

  """Transaction's records details"""
  records: [Record]

  """Reference"""
  reference1: Int

  """Reference-2"""
  reference2: Int

  """Reference-3"""
  reference3: Int

  """Register number"""
  registerNumber: Int

  """Total NIS amount"""
  shekelSum: Float

  """Identifier of transaction cancelled by Strogno"""
  stornoCancelledTransactionId: Int

  """Transaction type code"""
  type: String

  """User name"""
  username: String

  """Date"""
  valueDate: String
}

"""A Single Bank Page Record"""
type BankPageRecord {
  id: Int!
  bankPageId: Int!
  reference: Int
  debitOrCredit: String!
  cumulativeBalance: Float
  cumulativeBalanceCalculated: Float
  matchNumber: Int
  accountId: String
  sum: Float
  details: String
  accountName: String
  date: String
  adjustedRecord: String
  bankPage: BankPage
  account: Account
}

"""
A Single BA Single Bank Page (Which Is A List Of Bank Page Records)atch
"""
type BankPage {
  id: Int!
  bankPageRecords: [BankPageRecord]
}

"""A Single Hashavshevet Company"""
type Company {
  Company_File_Name: String!
  Company_Name: String!
  Comp_Vatnum: String!
}

"""A Single User on Hashavshevet"""
type HashavshevetUser {
  cid: String!
  user: String!
  use_name: String!
  wizcomp_no: String
  company_name: String
  user_id: Int!
  company_id: Int
  branch: Int
}

"""An Error Report of a Batch"""
union BatchErrorReport = BatchCheckMessage | BatchCheckList

type BatchCheckMessage {
  batch_check: String
}

type BatchCheckList {
  batch_check: [ARecordErrorDetails]
}

type ARecordErrorDetails {
  """AKA transactionId"""
  headerID: String
  err: Int

  """AKA recordId"""
  recId: Int
  field: String
  TxtMsg: String
  transaction: Batch
  record: Batch
}

"""Root Mutation"""
type Mutation {
  """Opens a new batch and return the number"""
  newBatch: NewBatch

  """Checks and inputs the temporary batch into the permanent storage"""
  issueBatch(
    """Input the batch having this ID"""
    id: Int
  ): IsuueBatch

  """
  Import transactions to a new or already existing temporary batch. You may check for errors or input the batch into the permanent storage (if no errors were found).
  """
  postTransactionsToBatch(
    """
    Insert the transactions to the temporary batch having this number. If no such temporary batch exists, open a new batch.
    """
    batchId: Int

    """check the batch for errors and return the batch status"""
    checkBatch: Boolean

    """
    Insert the transactions to the last open temporary batch. If false, open a new batch.
    """
    insertToLastBatch: Boolean

    """input the temporary batch into the permanent storage."""
    issueBatch: Boolean

    """List of Transactions to add."""
    transactionsList: [PostTransaction]
  ): PostTransactionsResponse

  """Import  or update records to chosen index"""
  postBankPage(bankPageRecords: [PostBankPageRecord]): PostBankPageResponse
}

type NewBatch {
  newbatch: Int
  batch: Batch
}

union IsuueBatch = IssueBatchStatus | BatchCheckMessage | BatchCheckList

type IssueBatchStatus {
  batch_issue: String
}

"""Response for Posting Transactions to a Batch"""
union PostTransactionsResponse = PostTransactionsResponsWithoutErrors | PostTransactionsResponsWithErrors

"""Response for Posting Transactions to a Batch"""
type PostTransactionsResponsWithoutErrors {
  """Final Status"""
  status: String

  """Batch Issue Status"""
  batch_issue: String

  """Batch Check Status"""
  batch_check: String

  """Batch identifier (on cases new batch was created)"""
  newbatch: Int

  """Batch identifier (on cases added to existing batch)"""
  batchno: Int

  """Batch identifier"""
  batchId: Int

  """Batch Details"""
  batch: Batch

  """errors list"""
  errors: String
}

"""Response for Posting Transactions to a Batch"""
type PostTransactionsResponsWithErrors {
  """Final Status"""
  status: String

  """Batch Issue Status"""
  batch_issue: String

  """Batch Check Status"""
  batch_check: String

  """Batch identifier (on cases new batch was created)"""
  newbatch: Int

  """Batch identifier (on cases added to existing batch)"""
  batchno: Int

  """Batch identifier"""
  batchId: Int

  """Batch Details"""
  batch: Batch

  """errors list"""
  errors: [ARecordErrorDetails]
}

"""Interface for posting new Transaction"""
input PostTransaction {
  """VAT registration number (max 9 characters)"""
  authorizedDealerNumber: String

  """Branch"""
  branch: Int

  """Cost-center code (existing code)"""
  costingCode: String

  """Main credit account identifier (max 15 charactes)"""
  creditorId: String!

  """Name of the main credit account (max 50 characters)"""
  creditorName: String

  """Currency (max 5 characters)"""
  currencyCode: String

  """Additional date"""
  date3: String

  """Main debit account identifier (max 15 charactes)"""
  debtorId: String!

  """Name of the main debit account (max 50 characters)"""
  debtorName: String

  """Description (max 250 characters)"""
  description: String

  """Remarks (max 50 characters)"""
  details1: String

  """Additional remarks (max 50 characters)"""
  details2: String

  """Due date"""
  dueDate: String

  """Total amount in foreign currency (credit or debit)"""
  foreignCurrencySum: Float

  """Quantity"""
  quantity: Float

  """Reference"""
  reference1: Int

  """Reference-2"""
  reference2: Int

  """Referenc-3"""
  reference3: Int

  """Total NIS amount (credit or debit)"""
  shekelSum: Float!

  """Transaction type code"""
  type: String

  """Date"""
  valueDate: String

  """List of Records to add."""
  records: [PostRecord]
}

"""Interface for posting new Record"""
input PostRecord {
  """Account identifier (max 15 characters)"""
  accountId: String!

  """Credit / Debit"""
  debitOrCreditNumber: debitOrCreditNumber!

  """Foreign currency amount"""
  foreignCurrencySum: Float

  """NIS amount"""
  shekelSum: Float!
}

"""Credit / Debit"""
enum debitOrCreditNumber {
  Credit
  Debit
}

type PostBankPageResponse {
  status: String
  errors: [BankError]
}

type BankError {
  index: Int
  err: String
}

"""Interface for posting new Bank Page Record"""
input PostBankPageRecord {
  AccountKey: String!
  Reference: Int
  CreditDebit: Int!
  SuF: Int!
  Details: String
}
