type Query {
  """A Single Record by its ID"""
  recordById(id: Int): Record

  """List of All Records"""
  records: [Record]

  """A Single Transaction by its ID"""
  transactionById(id: Int): Transaction

  """List of All Transactions"""
  transactions: [Transaction]

  """A Single Batch by its ID"""
  batchById(id: Int): Batch

  """List of All Batches"""
  batches: [Batch]

  """A Single Account by its ID"""
  accountById(id: Int): Account

  """List of All Accounts"""
  accounts: [Account]

  """A Single Bank Page Record by its ID"""
  bankPageRecordById(id: Int): BankPageRecord

  """List of All Bank Page Records"""
  bankPageRecords: [BankPageRecord]

  """A Single Bank Page (Which Is A List Of Bank Page Records), by its ID"""
  bankPageById(id: Int): BankPage

  """List Of Bank Pages"""
  bankPages: [BankPage]

  """
  List of Companies for user token thats defined on: 'WizcloudApiPrivateKey'
  """
  userCompanies: [Company]

  """Get User Details"""
  userDetails: HashavshevetUser

  """Checks if there are errors in the batch"""
  checkBatch(batchId: Int): BatchErrorReport
}

"""A Single Record"""
type Record {
  debitOrCredit: String!
  counterAccountId: String
  matchNumberCardAnalysis: Int
  debitOrCreditNumber: Int!
  id: Int!
  accountId: String!
  counterAccountName: String
  shekelCredit: Float
  shekelDebit: Float
  shekelSum: Float
  shekelSumClosedInRecord: Float
  shekelSumOpenInRecord: Float
  cumulativeBalance: Float
  foreignCurrencyCumulativeBalanceWithoutOpeningBalance: Float
  cumulativeBalanceWithoutOpeningBalance: Float
  shekelCumulativeBalanceBySector: Float
  cumulativeBalanceBySortKey: Float
  cumulativeBalanceOfOpenSumInRecord: Float
  foreignCurrencyCredit: Float
  foreignCurrencyDebit: Float
  foreignCurrencyCumulativeBalance: Float
  foreignCurrencySum: Float
  foreignCurrencySumClosedInRecord: Float
  foreignCurrencySunOpenInRecord: Float
  estimatedSum: Float
  transactionId: Int!
  batchId: Int!
  transaction: Transaction
  batch: Batch
  account: Account
  counterAccount: Account
}

"""A Transaction of Some Records"""
type Transaction {
  debtorId: String
  creditorId: String
  type: String
  currencyCode: String
  foreignCurrencySum: Float
  shekelSum: Float
  reference1: Int
  reference2: Int
  reference3: Int
  valueDate: String
  dueDate: String
  details1: String
  details2: String
  exchangeRateDifferences: String
  costingCodeSector: String
  quantity: Float
  inventoryId: Int
  chequeId: Int
  id: Int!
  batchId: Int!
  authorizedDealerNumber: String
  registerNumber: Int
  stornoCancelledTransactionId: Int
  branch: Int
  description: String
  linkedFile: String
  costingCode: String
  username: String
  branchName: String
  costingCodeName: String
  batch: Batch
  debtor: Account
  creditor: Account
  records: [Record]
}

"""A Single Batch"""
type Batch {
  id: Int!
  type: String
  status: String
  issueDate: String
  details: String
  initTime: String
  initDate: String
  transactions: [Transaction]
  records: [Record]
}

"""A Single Account"""
type Account {
  id: String!
  name: String
  sortGroup: Int
  sector: String
  details: String
  initDate: String
  type: String
  isActive: String
  address: String
  city: String
  zipcode: String
  country: String
  phone: String
  cellphone: String
  fax: String
  email: String
  balanceCode: String
  generalDiscountPercent: Float
  vatExempt: String
  occupation: String
  agent: Int
  withholdingPercent: Float
  withholdingValidity: String
  bankId: String
  bankBranchId: String
  bankAccountId: String
  authorizedDealerNumber: String
  mainAccount: String
  maxCredit: Float
  maxCreditCurrency: String
  maxObligo: Float
  maxObligoCurrency: String
  incomeFileNumber: String
  centralAccount: String
  accountantTransfer: String
  costingCode: String
}

"""A Single Bank Page Record"""
type BankPageRecord {
  id: Int!
  bankPageId: Int!
  reference: Int
  debitOrCredit: String!
  cumulativeBalance: Float
  cumulativeBalanceCalculated: Float
  matchNumber: Int
  accountId: String
  sum: Float
  details: String
  accountName: String
  date: String
  adjustedRecord: String
  bankPage: BankPage
  account: Account
}

"""
A Single BA Single Bank Page (Which Is A List Of Bank Page Records)atch
"""
type BankPage {
  id: Int!
  bankPageRecords: [BankPageRecord]
}

"""A Single Hashavshevet Company"""
type Company {
  Company_File_Name: String!
  Company_Name: String!
  Comp_Vatnum: String!
}

"""A Single User on Hashavshevet"""
type HashavshevetUser {
  cid: String!
  user: String!
  use_name: String!
  wizcomp_no: String
  company_name: String
  user_id: Int!
  company_id: Int
  branch: Int
}

"""An Error Report of a Batch"""
union BatchErrorReport = BatchCheckMessage | BatchCheckList

type BatchCheckMessage {
  batch_check: String
}

type BatchCheckList {
  batch_check: [ARecordErrorDetails]
}

type ARecordErrorDetails {
  """AKA transactionId"""
  headerID: String
  err: Int

  """AKA recordId"""
  recId: Int
  field: String
  TxtMsg: String
  transaction: Batch
  record: Batch
}

"""Root Mutation"""
type Mutation {
  """Opens a new batch and return the number"""
  newBatch: NewBatch

  """Checks and inputs the temporary batch into the permanent storage"""
  issueBatch(batchId: Int): IsuueBatch

  """
  Import transactions to a new or already existing temporary batch. You may check for errors or input the batch into the permanent storage (if no errors were found).
  """
  postTransactionsToBatch(batchId: Int, insertToLastBatch: Boolean, checkBatch: Boolean, issueBatch: Boolean, transactionsList: [PostTransaction]): PostTransactionsResponse

  """Import  or update records to chosen index"""
  postBankPage(bankPageRecords: [PostBankPageRecord]): PostBankPageResponse
}

type NewBatch {
  newbatch: Int
  batch: Batch
}

union IsuueBatch = IssueBatchStatus | BatchCheckMessage | BatchCheckList

type IssueBatchStatus {
  batch_issue: String
}

"""Response for Posting Transactions to a Batch"""
union PostTransactionsResponse = PostTransactionsResponsWithoutErrors | PostTransactionsResponsWithErrors

"""Response for Posting Transactions to a Batch"""
type PostTransactionsResponsWithoutErrors {
  status: String
  batch_issue: String
  batch_check: String
  newbatch: Int
  batchno: Int
  batch_id: Int
  errors: String
  batch: Batch
}

"""Response for Posting Transactions to a Batch"""
type PostTransactionsResponsWithErrors {
  status: String
  batch_issue: String
  batch_check: String
  newbatch: Int
  batchno: Int
  batch_id: Int
  errors: [ARecordErrorDetails]
  batch: Batch
}

"""Interface for posting new Transaction"""
input PostTransaction {
  branch: Int
  costingCode: String
  creditorName: String
  currencyCode: String
  date3: String
  debtorName: String
  description: String
  details2: String
  details1: String
  dueDate: String
  authorizedDealerNumber: String
  quantity: Float
  reference1: Int
  reference2: Int
  reference3: Int
  shekelSum: Float!
  foreignCurrencySum: Float
  creditorId: String!
  debtorId: String!
  type: String
  valueDate: String
  records: [PostRecord]
}

"""Interface for posting new Record"""
input PostRecord {
  accountId: String!
  debit_orCreditNumber: String!
  shekelSum: Float!
  foreignCurrencySum: Float
}

type PostBankPageResponse {
  status: String
  errors: [BankError]
}

type BankError {
  index: Int
  err: String
}

"""Interface for posting new Bank Page Record"""
input PostBankPageRecord {
  AccountKey: String!
  Reference: Int
  CreditDebit: Int!
  SuF: Int!
  Details: String
}
